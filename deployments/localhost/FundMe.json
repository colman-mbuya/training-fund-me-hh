{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x83134046599f68654e03a5e70935875e213d2552329c48da81d66c658d102674",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "896932",
    "logsBloom": "0x
    "blockHash": "0x72ff7d02095df06caeb416c2a37b05162fef03a56279b5027b2fc5660325f59f",
    "transactionHash": "0x83134046599f68654e03a5e70935875e213d2552329c48da81d66c658d102674",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "896932",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x0000000000000000000000000000000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f4b1a22c80aa5614721215fc3f66ac7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x9267fcf4f641a180c57cec08d5a50512430e218918643db94a8d8ef99ec60ed0\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {PriceConverter} from \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 5;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address funder => uint256 amount) private s_addressToAmountFunded;\\n    IPyth private s_priceFeed;\\n    bytes32 private s_priceFeedId;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeed, bytes32 priceFeedId) {\\n        s_priceFeed = IPyth(priceFeed);\\n        s_priceFeedId = priceFeedId;\\n        i_owner = msg.sender;\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed, s_priceFeedId) >= MINIMUM_USD, \\\"You need to send more Ether\\\");\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        address[] memory funders = s_funders; //Gas savings as we won't need to loop over a storage array\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success,) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (IPyth) {\\n        return s_priceFeed;\\n    }\\n\\n    // address s_priceFeedAddress = 0x2880aB155794e7179c9eE2e38200202908C17B43;\\n    // bytes32 s_priceId = 0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6;\\n    // IPyth s_priceFeed = IPyth(s_priceFeedAddress);\\n\\n    // function testPriceFeed() public view returns (uint256) {\\n    //     uint256 testValue = 1;\\n    //     return testValue.getConversionRate(s_priceFeed, s_priceId);\\n    // }\\n\\n}\",\"keccak256\":\"0x4ffd42d0b12c9eb20f61112c9ce75edcd10fd168f9a2e4ab5c1e67c1bdcccaf9\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(IPyth priceFeed, bytes32 priceId) internal view returns (uint256) {\\n        PythStructs.Price memory currentBasePrice = priceFeed.getPriceUnsafe(priceId);\\n        // Ignoring the exponent for now, and returning just the price in wei. We will assume decimal price is returned price\\n        // with expo of 8. Need to figure out how to do this properly given Pyth returns signed ints. Also there is got to be\\n        // an easier way to do this conversion....\\n        return uint256(uint64(currentBasePrice.price)) * 1e10;\\n    }\\n\\n    function getConversionRate(uint256 ethAmount, IPyth priceFeed, bytes32 priceId) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed, priceId);\\n        uint256 ethAmountInUsd = ( ethPrice * ethAmount ) / 1e36;\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xd2a8da7d3eaea034897d502a041b9ac3dd304bc04db3071d2367a43d3223ca1f\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200103538038062001035833981810160405281019062000037919062000160565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003819055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050620001a7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ed82620000c0565b9050919050565b620000ff81620000e0565b81146200010b57600080fd5b50565b6000815190506200011f81620000f4565b92915050565b6000819050919050565b6200013a8162000125565b81146200014657600080fd5b50565b6000815190506200015a816200012f565b92915050565b600080604083850312156200017a5762000179620000bb565b5b60006200018a858286016200010e565b92505060206200019d8582860162000149565b9150509250929050565b608051610e64620001d1600039600081816101dc015281816103f501526104940152610e646000f3fe6080604052600436106100705760003560e01c8063893d20e81161004e578063893d20e8146100f45780639e87a5cd1461011f578063b60d42881461014a578063d7b4750c1461015457610070565b80630343fb25146100755780633ccfd60b146100b25780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610860565b610191565b6040516100a991906108a6565b60405180910390f35b3480156100be57600080fd5b506100c76101da565b005b3480156100d557600080fd5b506100de61048b565b6040516100eb91906108a6565b60405180910390f35b34801561010057600080fd5b50610109610490565b60405161011691906108d0565b60405180910390f35b34801561012b57600080fd5b506101346104b8565b604051610141919061094a565b60405180910390f35b6101526104e2565b005b34801561016057600080fd5b5061017b60048036038101906101769190610991565b610619565b60405161018891906108d0565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461025f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156102e257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610298575b5050505050905060005b815181101561039057600080828154811061030a576103096109be565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038890610a1c565b9150506102ec565b50600067ffffffffffffffff8111156103ac576103ab610a64565b5b6040519080825280602002602001820160405280156103da5781602001602082028036833780820191505090505b50600090805190602001906103f092919061074c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161043790610ac4565b60006040518083038185875af1925050503d8060008114610474576040519150601f19603f3d011682016040523d82523d6000602084013e610479565b606091505b505090508061048757600080fd5b5050565b600581565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600561051d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354346106609092919063ffffffff16565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610b36565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106109190610b56565b92505081905550565b600080828154811061062e5761062d6109be565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066d84846106a5565b905060006ec097ce7bc90715b34b9f1000000000868361068d9190610b8a565b6106979190610bfb565b905080925050509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166396834ad3846040518263ffffffff1660e01b81526004016106e19190610c45565b608060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190610e01565b90506402540be400816000015167ffffffffffffffff166107439190610b8a565b91505092915050565b8280548282559060005260206000209081019282156107c5579160200282015b828111156107c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061076c565b5b5090506107d291906107d6565b5090565b5b808211156107ef5760008160009055506001016107d7565b5090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082d82610802565b9050919050565b61083d81610822565b811461084857600080fd5b50565b60008135905061085a81610834565b92915050565b600060208284031215610876576108756107fd565b5b60006108848482850161084b565b91505092915050565b6000819050919050565b6108a08161088d565b82525050565b60006020820190506108bb6000830184610897565b92915050565b6108ca81610822565b82525050565b60006020820190506108e560008301846108c1565b92915050565b6000819050919050565b600061091061090b61090684610802565b6108eb565b610802565b9050919050565b6000610922826108f5565b9050919050565b600061093482610917565b9050919050565b61094481610929565b82525050565b600060208201905061095f600083018461093b565b92915050565b61096e8161088d565b811461097957600080fd5b50565b60008135905061098b81610965565b92915050565b6000602082840312156109a7576109a66107fd565b5b60006109b58482850161097c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a278261088d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5957610a586109ed565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aae600083610a93565b9150610ab982610a9e565b600082019050919050565b6000610acf82610aa1565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f2073656e64206d6f72652045746865720000000000600082015250565b6000610b20601b83610ad9565b9150610b2b82610aea565b602082019050919050565b60006020820190508181036000830152610b4f81610b13565b9050919050565b6000610b618261088d565b9150610b6c8361088d565b9250828201905080821115610b8457610b836109ed565b5b92915050565b6000610b958261088d565b9150610ba08361088d565b9250828202610bae8161088d565b91508282048414831517610bc557610bc46109ed565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c068261088d565b9150610c118361088d565b925082610c2157610c20610bcc565b5b828204905092915050565b6000819050919050565b610c3f81610c2c565b82525050565b6000602082019050610c5a6000830184610c36565b92915050565b600080fd5b6000601f19601f8301169050919050565b610c7f82610c65565b810181811067ffffffffffffffff82111715610c9e57610c9d610a64565b5b80604052505050565b6000610cb16107f3565b9050610cbd8282610c76565b919050565b60008160070b9050919050565b610cd881610cc2565b8114610ce357600080fd5b50565b600081519050610cf581610ccf565b92915050565b600067ffffffffffffffff82169050919050565b610d1881610cfb565b8114610d2357600080fd5b50565b600081519050610d3581610d0f565b92915050565b60008160030b9050919050565b610d5181610d3b565b8114610d5c57600080fd5b50565b600081519050610d6e81610d48565b92915050565b600081519050610d8381610965565b92915050565b600060808284031215610d9f57610d9e610c60565b5b610da96080610ca7565b90506000610db984828501610ce6565b6000830152506020610dcd84828501610d26565b6020830152506040610de184828501610d5f565b6040830152506060610df584828501610d74565b60608301525092915050565b600060808284031215610e1757610e166107fd565b5b6000610e2584828501610d89565b9150509291505056fea26469706673582212204bebd077fedef5f735e2de6e81d9667a173ef87ac3914910fe6975d820bbb56d64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063893d20e81161004e578063893d20e8146100f45780639e87a5cd1461011f578063b60d42881461014a578063d7b4750c1461015457610070565b80630343fb25146100755780633ccfd60b146100b25780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610860565b610191565b6040516100a991906108a6565b60405180910390f35b3480156100be57600080fd5b506100c76101da565b005b3480156100d557600080fd5b506100de61048b565b6040516100eb91906108a6565b60405180910390f35b34801561010057600080fd5b50610109610490565b60405161011691906108d0565b60405180910390f35b34801561012b57600080fd5b506101346104b8565b604051610141919061094a565b60405180910390f35b6101526104e2565b005b34801561016057600080fd5b5061017b60048036038101906101769190610991565b610619565b60405161018891906108d0565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461025f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156102e257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610298575b5050505050905060005b815181101561039057600080828154811061030a576103096109be565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038890610a1c565b9150506102ec565b50600067ffffffffffffffff8111156103ac576103ab610a64565b5b6040519080825280602002602001820160405280156103da5781602001602082028036833780820191505090505b50600090805190602001906103f092919061074c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161043790610ac4565b60006040518083038185875af1925050503d8060008114610474576040519150601f19603f3d011682016040523d82523d6000602084013e610479565b606091505b505090508061048757600080fd5b5050565b600581565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600561051d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354346106609092919063ffffffff16565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610b36565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106109190610b56565b92505081905550565b600080828154811061062e5761062d6109be565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066d84846106a5565b905060006ec097ce7bc90715b34b9f1000000000868361068d9190610b8a565b6106979190610bfb565b905080925050509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166396834ad3846040518263ffffffff1660e01b81526004016106e19190610c45565b608060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190610e01565b90506402540be400816000015167ffffffffffffffff166107439190610b8a565b91505092915050565b8280548282559060005260206000209081019282156107c5579160200282015b828111156107c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061076c565b5b5090506107d291906107d6565b5090565b5b808211156107ef5760008160009055506001016107d7565b5090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082d82610802565b9050919050565b61083d81610822565b811461084857600080fd5b50565b60008135905061085a81610834565b92915050565b600060208284031215610876576108756107fd565b5b60006108848482850161084b565b91505092915050565b6000819050919050565b6108a08161088d565b82525050565b60006020820190506108bb6000830184610897565b92915050565b6108ca81610822565b82525050565b60006020820190506108e560008301846108c1565b92915050565b6000819050919050565b600061091061090b61090684610802565b6108eb565b610802565b9050919050565b6000610922826108f5565b9050919050565b600061093482610917565b9050919050565b61094481610929565b82525050565b600060208201905061095f600083018461093b565b92915050565b61096e8161088d565b811461097957600080fd5b50565b60008135905061098b81610965565b92915050565b6000602082840312156109a7576109a66107fd565b5b60006109b58482850161097c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a278261088d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5957610a586109ed565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aae600083610a93565b9150610ab982610a9e565b600082019050919050565b6000610acf82610aa1565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f2073656e64206d6f72652045746865720000000000600082015250565b6000610b20601b83610ad9565b9150610b2b82610aea565b602082019050919050565b60006020820190508181036000830152610b4f81610b13565b9050919050565b6000610b618261088d565b9150610b6c8361088d565b9250828201905080821115610b8457610b836109ed565b5b92915050565b6000610b958261088d565b9150610ba08361088d565b9250828202610bae8161088d565b91508282048414831517610bc557610bc46109ed565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c068261088d565b9150610c118361088d565b925082610c2157610c20610bcc565b5b828204905092915050565b6000819050919050565b610c3f81610c2c565b82525050565b6000602082019050610c5a6000830184610c36565b92915050565b600080fd5b6000601f19601f8301169050919050565b610c7f82610c65565b810181811067ffffffffffffffff82111715610c9e57610c9d610a64565b5b80604052505050565b6000610cb16107f3565b9050610cbd8282610c76565b919050565b60008160070b9050919050565b610cd881610cc2565b8114610ce357600080fd5b50565b600081519050610cf581610ccf565b92915050565b600067ffffffffffffffff82169050919050565b610d1881610cfb565b8114610d2357600080fd5b50565b600081519050610d3581610d0f565b92915050565b60008160030b9050919050565b610d5181610d3b565b8114610d5c57600080fd5b50565b600081519050610d6e81610d48565b92915050565b600081519050610d8381610965565b92915050565b600060808284031215610d9f57610d9e610c60565b5b610da96080610ca7565b90506000610db984828501610ce6565b6000830152506020610dcd84828501610d26565b6020830152506040610de184828501610d5f565b6040830152506060610df584828501610d74565b60608301525092915050565b600060808284031215610e1757610e166107fd565b5b6000610e2584828501610d89565b9150509291505056fea26469706673582212204bebd077fedef5f735e2de6e81d9667a173ef87ac3914910fe6975d820bbb56d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 198,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 202,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 205,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPyth)136"
      },
      {
        "astId": 207,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeedId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPyth)136": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}